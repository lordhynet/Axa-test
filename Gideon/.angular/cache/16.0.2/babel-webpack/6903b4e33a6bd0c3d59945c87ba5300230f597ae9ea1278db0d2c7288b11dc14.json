{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UploadsComponent = class UploadsComponent {\n  constructor(formBuilder, test) {\n    this.formBuilder = formBuilder;\n    this.test = test;\n    this.fileTypeError = false;\n    this.uploadForm = this.formBuilder.group({\n      document: [null]\n    });\n  }\n  onFileSelected(event) {\n    const element = event.target;\n    let fileList = element.files;\n    if (fileList && fileList.length > 0) {\n      const file = fileList[0];\n      const fileControl = this.uploadForm.get('file');\n      if (fileControl) {\n        if (!file.name.endsWith('.xlsx')) {\n          fileControl.setErrors({\n            incorrectFileType: true\n          });\n        } else {\n          fileControl.setValue(file);\n          fileControl.setErrors(null);\n        }\n      }\n    }\n  }\n  onFileSelect(event) {\n    const element = event.currentTarget;\n    let file = element.files?.item(0) ?? null;\n    this.fileTypeError = false;\n    if (file) {\n      if (/(.csv|.xls|.xlsx)$/i.test(file.name)) {\n        this.uploadForm.patchValue({\n          document: file\n        });\n      } else {\n        this.fileTypeError = true;\n        this.uploadForm.reset();\n      }\n    }\n  }\n  onUpload() {}\n  resetUpload() {\n    this.uploadForm.reset();\n    this.fileTypeError = false;\n  }\n};\nUploadsComponent = __decorate([Component({\n  selector: 'app-uploads',\n  templateUrl: './uploads.component.html',\n  styleUrls: ['./uploads.component.css']\n})], UploadsComponent);\nexport { UploadsComponent };","map":{"version":3,"names":["Component","UploadsComponent","constructor","formBuilder","test","fileTypeError","uploadForm","group","document","onFileSelected","event","element","target","fileList","files","length","file","fileControl","get","name","endsWith","setErrors","incorrectFileType","setValue","onFileSelect","currentTarget","item","patchValue","reset","onUpload","resetUpload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gideon.surakat\\Desktop\\Gideon\\Gideon\\src\\app\\components\\uploads\\uploads.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-uploads',\n  templateUrl: './uploads.component.html',\n  styleUrls: ['./uploads.component.css']\n})\nexport class UploadsComponent {\n  uploadForm!: FormGroup;\n  fileTypeError: boolean = false;\n  constructor(private formBuilder: FormBuilder, private test : testfil) { \n    this.uploadForm = this.formBuilder.group({\n      document: [null]  \n    });\n  }\n\n\n  onFileSelected(event: Event): void {\n    const element = event.target as HTMLInputElement;\n    let fileList: FileList | null = element.files;\n    if (fileList && fileList.length > 0) {\n      const file = fileList[0];\n  \n      const fileControl = this.uploadForm.get('file');\n  \n      if (fileControl) {\n        if (!file.name.endsWith('.xlsx')) {\n          fileControl.setErrors({ incorrectFileType: true });\n        } else {\n          fileControl.setValue(file);\n          fileControl.setErrors(null);\n        }\n      }\n    }\n  }\n  \n\n\n  onFileSelect(event: Event) {\n    const element = event.currentTarget as HTMLInputElement;\n    let file: File | null = element.files?.item(0) ?? null;\n\n    this.fileTypeError = false;\n    \n    if (file) {\n      if (/(.csv|.xls|.xlsx)$/i.test(file.name)) {\n        this.uploadForm.patchValue({\n          document: file\n        });\n      } else {\n        this.fileTypeError = true;\n        this.uploadForm.reset();\n      }\n    }\n  }\n\n  onUpload() {\n    \n  }\n\n  resetUpload() {\n    this.uploadForm.reset();\n    this.fileTypeError = false;\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQzC,IAAaC,gBAAgB,GAA7B,MAAaA,gBAAgB;EAG3BC,YAAoBC,WAAwB,EAAUC,IAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAD1D,KAAAC,aAAa,GAAY,KAAK;IAE5B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACvCC,QAAQ,EAAE,CAAC,IAAI;KAChB,CAAC;EACJ;EAGAC,cAAcA,CAACC,KAAY;IACzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAA0B;IAChD,IAAIC,QAAQ,GAAoBF,OAAO,CAACG,KAAK;IAC7C,IAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,IAAI,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAExB,MAAMI,WAAW,GAAG,IAAI,CAACX,UAAU,CAACY,GAAG,CAAC,MAAM,CAAC;MAE/C,IAAID,WAAW,EAAE;QACf,IAAI,CAACD,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;UAChCH,WAAW,CAACI,SAAS,CAAC;YAAEC,iBAAiB,EAAE;UAAI,CAAE,CAAC;SACnD,MAAM;UACLL,WAAW,CAACM,QAAQ,CAACP,IAAI,CAAC;UAC1BC,WAAW,CAACI,SAAS,CAAC,IAAI,CAAC;;;;EAInC;EAIAG,YAAYA,CAACd,KAAY;IACvB,MAAMC,OAAO,GAAGD,KAAK,CAACe,aAAiC;IACvD,IAAIT,IAAI,GAAgBL,OAAO,CAACG,KAAK,EAAEY,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI;IAEtD,IAAI,CAACrB,aAAa,GAAG,KAAK;IAE1B,IAAIW,IAAI,EAAE;MACR,IAAI,qBAAqB,CAACZ,IAAI,CAACY,IAAI,CAACG,IAAI,CAAC,EAAE;QACzC,IAAI,CAACb,UAAU,CAACqB,UAAU,CAAC;UACzBnB,QAAQ,EAAEQ;SACX,CAAC;OACH,MAAM;QACL,IAAI,CAACX,aAAa,GAAG,IAAI;QACzB,IAAI,CAACC,UAAU,CAACsB,KAAK,EAAE;;;EAG7B;EAEAC,QAAQA,CAAA,GAER;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACxB,UAAU,CAACsB,KAAK,EAAE;IACvB,IAAI,CAACvB,aAAa,GAAG,KAAK;EAC5B;CACD;AAzDYJ,gBAAgB,GAAA8B,UAAA,EAL5B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWjC,gBAAgB,CAyD5B;SAzDYA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}