{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UploadsComponent = class UploadsComponent {\n  constructor(formBuilder, uploadService) {\n    this.formBuilder = formBuilder;\n    this.uploadService = uploadService;\n    this.fileTypeError = false;\n    this.uploadForm = this.formBuilder.group({\n      document: [null]\n    });\n  }\n  onFileSelected(event) {\n    const element = event.target;\n    let fileList = element.files;\n    if (fileList && fileList.length > 0) {\n      const file = fileList[0];\n      const fileControl = this.uploadForm.get('file');\n      if (fileControl) {\n        if (!file.name.endsWith('.xlsx')) {\n          fileControl.setErrors({\n            incorrectFileType: true\n          });\n        } else {\n          fileControl.setValue(file);\n          fileControl.setErrors(null);\n        }\n      }\n    }\n  }\n  onFileSelect(event) {\n    const element = event.currentTarget;\n    let file = element.files?.item(0) ?? null;\n    this.fileTypeError = false;\n    if (file) {\n      if (/(.csv|.xls|.xlsx)$/i.test(file.name)) {\n        this.uploadForm.patchValue({\n          document: file\n        });\n      } else {\n        this.fileTypeError = true;\n        this.uploadForm.reset();\n      }\n    }\n  }\n  onUpload() {\n    if (this.uploadForm.valid && !this.fileTypeError) {\n      const fileToUpload = this.uploadForm.get('document')?.value;\n      console.log(fileToUpload);\n      if (fileToUpload) {\n        // Call the upload service\n        this.uploadService.upload(fileToUpload).subscribe(event => {\n          console.log('Upload successful:', event);\n          this.result = event;\n        }, error => {\n          console.error('Error uploading file:', error);\n        });\n      }\n    } else {\n      console.error('Form is not valid or file type error exists');\n    }\n  }\n  resetUpload() {\n    this.uploadForm.reset();\n    this.fileTypeError = false;\n  }\n};\nUploadsComponent = __decorate([Component({\n  selector: 'app-uploads',\n  templateUrl: './uploads.component.html',\n  styleUrls: ['./uploads.component.css']\n})], UploadsComponent);\nexport { UploadsComponent };","map":{"version":3,"names":["Component","UploadsComponent","constructor","formBuilder","uploadService","fileTypeError","uploadForm","group","document","onFileSelected","event","element","target","fileList","files","length","file","fileControl","get","name","endsWith","setErrors","incorrectFileType","setValue","onFileSelect","currentTarget","item","test","patchValue","reset","onUpload","valid","fileToUpload","value","console","log","upload","subscribe","result","error","resetUpload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\gideon.surakat\\Desktop\\Gideon\\Gideon\\src\\app\\components\\uploads\\uploads.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UploadService } from 'src/app/services/upload.service';\n\n@Component({\n  selector: 'app-uploads',\n  templateUrl: './uploads.component.html',\n  styleUrls: ['./uploads.component.css']\n})\nexport class UploadsComponent {\n  uploadForm!: FormGroup;\n  fileTypeError: boolean = false;\n  result : any\n  constructor(private formBuilder: FormBuilder, private uploadService :UploadService ) { \n    this.uploadForm = this.formBuilder.group({\n      document: [null]  \n    });\n  }\n\n\n  onFileSelected(event: Event): void {\n    const element = event.target as HTMLInputElement;\n    let fileList: FileList | null = element.files;\n    if (fileList && fileList.length > 0) {\n      const file = fileList[0];\n  \n      const fileControl = this.uploadForm.get('file');\n  \n      if (fileControl) {\n        if (!file.name.endsWith('.xlsx')) {\n          fileControl.setErrors({ incorrectFileType: true });\n        } else {\n          fileControl.setValue(file);\n          fileControl.setErrors(null);\n        }\n      }\n    }\n  }\n  \n\n\n  onFileSelect(event: Event) {\n    const element = event.currentTarget as HTMLInputElement;\n    let file: File | null = element.files?.item(0) ?? null;\n\n    this.fileTypeError = false;\n    \n    if (file) {\n      if (/(.csv|.xls|.xlsx)$/i.test(file.name)) {\n        this.uploadForm.patchValue({\n          document: file\n        });\n      } else {\n        this.fileTypeError = true;\n        this.uploadForm.reset();\n      }\n    }\n  }\n\n  onUpload(): void {\n    if (this.uploadForm.valid && !this.fileTypeError) {\n    \n      const fileToUpload = this.uploadForm.get('document')?.value;\nconsole.log(fileToUpload)\n      \n      if (fileToUpload) {\n        // Call the upload service\n        this.uploadService.upload(fileToUpload).subscribe(\n          (event) => {\n            \n            console.log('Upload successful:', event);\n            this.result = event\n          },\n          (error) => {\n           \n            console.error('Error uploading file:', error);\n          }\n        );\n      }\n    } else {\n      console.error('Form is not valid or file type error exists');\n    }\n  }\n  resetUpload() {\n    this.uploadForm.reset();\n    this.fileTypeError = false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}